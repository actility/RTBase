#!/bin/sh
# vim: ft=sh: set noet ts=4 sw=4:

if [ -z "$ROOTACT" ]
then
	where=$(pwd)
	ROOTACT=$(dirname "${where}")
	export ROOTACT
	echo "ROOTACT not specified => ${ROOTACT}"
fi

Compile()
{
for i in base include lib _imsgtst _perf _htbl _btree _xlap
do
	(
	if [ -f ${i}/MAKE ]
	then
		cd $i
		echo "#####"
		echo "#####	$i"
		echo "#####"
		sh ./MAKE $*
	fi
	)
done
}

# frequemment oubliÃ© dans les makefile
CleanPlus()
{
	rm */core.* > /dev/null 2>&1
	rm */core > /dev/null 2>&1
	rm */TRACE_* > /dev/null 2>&1
	rm */*.log > /dev/null 2>&1
}

EchoTargetList()
{
	if [ -d $ROOTACT/lrr ]; then
		echo	" "
		echo	"** Note **"
		echo	"To build a LRR target, use the MAKE script provided in LRR source code"
		echo	"Hit CTRL+C to abort or choose a target in the following list"
		echo	" "
	fi
	echo	"1	| linux-x86"
	echo	"2	| linux-x86_64"
	echo	"3	| cov1"
	echo	"4	| macosx-x86"
	echo	"5	| macosx-x86_64"
	echo	"6	| centos6-x86"
	echo	"7	| centos6-x86_64"
	echo	"8	| cov2"
	echo	"9	| lpv3"
	echo	"10	| cov1_debug"
	echo	"11	| cov2_debug"
	echo	"12	| lpv3_debug"
	echo	"13	| angstrom_panrouter"
	echo	"14	| android_panrouter"
	echo	"15	| centos8-x86"
	echo	"16	| centos8-x86_64"
	echo	" "
	echo "> "
}

ChooseTarget()
{
	echo	"ROOTACT=$ROOTACT"

	file=$ROOTACT/rtbase/base/TARGET
	rep=0
	while [ "$rep" -eq "0" ]
	do
		tty > /dev/null 2>&1
		if [ $? = "0" ]
		then
			EchoTargetList
		fi

		read rep

		case $rep in
		1|linux-x86)	
			echo "SYSTEM=linux-x86" > $file
			;;
		2|linux-x86_64)	
			echo "SYSTEM=linux-x86_64" > $file
			;;
		3|cov1)	
			echo "SYSTEM=cov1" > $file
			;;
		4|macosx-x86)	
			echo "SYSTEM=macosx-x86" > $file
			;;
		5|macosx-x86_64)	
			echo "SYSTEM=macosx-x86_64" > $file
			;;
		6|centos6-x86)	
			echo "SYSTEM=centos6-x86" > $file
			;;
		7|centos6-x86_64)	
			echo "SYSTEM=centos6-x86_64" > $file
			;;
		8|cov2)	
			echo "SYSTEM=cov2" > $file
			;;
		9|lpv3)	
			echo "SYSTEM=lpv3" > $file
			;;
		10|cov1_debug)	
			echo "SYSTEM=cov1_debug" > $file
			;;
		11|cov2_debug)	
			echo "SYSTEM=cov2_debug" > $file
			;;
		12|lpv3_debug)	
			echo "SYSTEM=lpv3_debug" > $file
			;;
		13|angstrom_panrouter)	
			echo "SYSTEM=angstrom_panrouter" > $file
			;;
		14|android_panrouter)	
			echo "SYSTEM=android_panrouter" > $file
			;;
		15|centos8-x86)	
			echo "SYSTEM=centos8-x86" > $file
			;;
		16|centos8-x86_64)	
			echo "SYSTEM=centos8-x86_64" > $file
			;;
		*)
			echo "MAKE rtbase : unknown target $rep"
			tty > /dev/null 2>&1
			if [ $? != "0" ]
			then
				exit 1
			fi
			rep=0
			;;
		esac
	done
}

DoTarget()
{
	if [ ! -f $ROOTACT/rtbase/targeted ]
	then
		ChooseTarget
		sh -x $ROOTACT/rtbase/base/system > $ROOTACT/rtbase/targeted 2>&1
	fi

	if [ ! -f $ROOTACT/rtbase/base/TARGET ]
	then
		ChooseTarget
	fi
	. $ROOTACT/rtbase/base/system
}

DoScan()
{
	type scan-build
	if [ "$?" != "0" ]; then
		echo	"scan-build (clang tools) not found"
		return 1
	fi
	CleanPlus > /dev/null 2>&1
	Compile clean > /dev/null 2>&1
	rm $ROOTACT/rtbase/targeted >/dev/null 2>&1
	echo "SYSTEM=linux-x86_64" > $ROOTACT/rtbase/base/TARGET
	sh -x $ROOTACT/rtbase/base/system > $ROOTACT/rtbase/targeted 2>&1
	cd include
		./MAKE
	cd ..
	cd lib
		./MAKE clean > /dev/null 2>&1
		scan-build make 2> /dev/null
		ret=$?
		./MAKE clean > /dev/null 2>&1
	cd ..
	CleanPlus > /dev/null 2>&1
	Compile clean > /dev/null 2>&1
	rm $ROOTACT/rtbase/targeted >/dev/null 2>&1
	return $ret
}


SELF=rtbase
. $ROOTACT/rtbase/base/system
if [ -z $SYSTEM ]; then
	SYSTEM="undefined"
fi
echo	"#####"
echo	"make $* $SELF for [$SYSTEM]"


case  $# in
	0)
		DoTarget
		Compile
		exit 0
		;;
	*)	case $1 in
			system)
			echo "system ${2} selected"
			echo "SYSTEM=$2" > $ROOTACT/rtbase/base/TARGET
			sh -x $ROOTACT/rtbase/base/system > $ROOTACT/rtbase/targeted 2>&1
			Compile
			exit 0
			;;
			target)
				DoTarget
			;;
			src|source)
				shift
				./MAKE clean
				rm $ROOTACT/rtbase/targeted >/dev/null 2>&1
				sh ${MKPKGSOURCE} -p $SELF $*
				exit 0
			;;
			runtime)
				shift
				DoTarget
				./MAKE
				sh ${MKPKGRUNTIME} -p $SELF
				exit 0
			;;
			clean)
				shift
				CleanPlus
				Compile clean
				rm $ROOTACT/rtbase/targeted >/dev/null 2>&1
				exit 0
			;;
			tag)
				version=$(cat ./Version)
				version=v${version}
				echo "git tag -a $version -m'${version}'"
				echo "git push origin --tags"
				git tag -a $version -m${version}
				git push origin --tags
				exit 0
			;;
			scan)
				DoScan
				echo "Static code analysis return code : $?"
				exit $?
			;;
			*)
				DoTarget
				Compile $*
				exit 0
			;;
		esac
	;;
esac

echo "Usage: MAKE [target|clean|runtime|src|source]"
exit 1

